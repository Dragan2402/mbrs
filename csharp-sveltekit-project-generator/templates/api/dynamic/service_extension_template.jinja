using FluentValidation;
using FluentValidation.AspNetCore;
using {{ project_name }}.Data;
using {{ project_name }}.Infrastructure.Repositories;
using {{ project_name }}.Application.Repositories;
using {{ project_name }}.Application.Services;
using {{ project_name }}.Infrastructure.Services;
using Microsoft.EntityFrameworkCore;
using Npgsql;
using System.Reflection;
using System.Text.Json.Serialization;

namespace {{ project_name }}.Infrastructure.Extensions;

public static class ServiceExtensions
{
    public static void ConfigurePolicy(this IServiceCollection services)
    {
        services.AddCors(options =>
        {
            options.AddPolicy(
                "_AllowAllOrigins",
                builder =>
                {
                    builder.AllowAnyOrigin()
                        .AllowAnyHeader()
                        .AllowAnyMethod();
                });
        });
    }

    public static void RegisterDbContext(this IServiceCollection services, IConfiguration configuration)
    {
        var dataSourceBuilder = new NpgsqlDataSourceBuilder(configuration.GetConnectionString("DefaultConnection"));
        var dataSource = dataSourceBuilder.Build();

        services.AddDbContext<{{ context_name }}DbContext>(options =>
            options.UseNpgsql(dataSource, options => options.EnableRetryOnFailure()).UseSnakeCaseNamingConvention());
    }

    public static void RegisterControllers(this IServiceCollection services)
    {
        services.AddControllers().AddJsonOptions(options =>
        {
            options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
            options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
            options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
        });
    }

    public static void RegisterAutoMapper(this IServiceCollection services)
    {
        services.AddAutoMapper(Assembly.GetExecutingAssembly());
    }

    public static void RegisterServices(this IServiceCollection services)
    {
        {% for class in classes %}
        services.AddScoped<I{{ class.name }}Service, {{ class.name }}Service>();
        {% endfor %}
    }

    public static void RegisterRepositories(this IServiceCollection services)
    {
        {% for class in classes %}
        services.AddScoped<I{{ class.name }}Repository, {{ class.name }}Repository>();
        {% endfor %}
    }

    public static void RegisterFluentValidation(this IServiceCollection services)
    {
        services.AddFluentValidationAutoValidation();
        services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());
    }

    public static void RegisterAuthorization(this IServiceCollection services)
    {
    }
}
