using AutoMapper;
using {{ project_name }}.Application.Repositories;
using {{ project_name }}.Application.Services;
using {{ project_name }}.Domain;

namespace {{ project_name }}.Infrastructure.Services;

public class {{ class_name }}Service : I{{ class_name }}Service
{
    private readonly IMapper mapper;
    private readonly I{{ class_name }}Repository {{ class_name | lower}}Repository;

    public {{ class_name }}Service(
        IMapper mapper,
        I{{ class_name }}Repository {{ class_name | lower}}Repository)
    {
        this.mapper = mapper;
        this.{{ class_name | lower}}Repository = {{ class_name | lower}}Repository;
    }

    public async Task<List<{{ class_name }}>> GetAllAsync()
    {
        return await {{ class_name | lower}}Repository.GetAllAsync();
    }

    public async Task<{{ class_name }}> GetByIdAsync(long id)
    {
        return await {{ class_name | lower}}Repository.GetAsync(id);
    }

    public async Task DeleteAsync(long id)
    {
        var {{ class_name | lower}} = await {{ class_name | lower}}Repository.GetAsync(id);

        {{ class_name | lower}}Repository.Delete({{ class_name | lower}});
    }

    public async Task<{{ class_name }}> CreateAsync({{ class_name }} {{ class_name | lower }})
    {
        var created{{ class_name }} = await {{ class_name | lower }}Repository.AddAsync({{ class_name | lower }});
        return created{{ class_name }};
    }
}
