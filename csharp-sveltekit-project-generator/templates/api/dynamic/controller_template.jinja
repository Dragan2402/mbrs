using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using {{ project_name }}.Application.Services;
using {{ project_name }}.Data.Responses;
using {{ project_name }}.Data.Requests;
using {{ class_name }}Entity = {{ project_name }}.Domain.{{ class_name }};

namespace {{ project_name }}.Controllers;

[ApiController]
[Route("api/[controller]")]
public class {{ class_name }}Controller : ControllerBase
{
    private readonly IMapper mapper;
    private readonly I{{ class_name }}Service {{ class_name | lower }}Service;

    public {{ class_name }}Controller(
        IMapper mapper,
        I{{ class_name }}Service {{ class_name | lower }}Service)
    {
        this.mapper = mapper;
        this.{{ class_name | lower }}Service = {{ class_name | lower }}Service;
    }

    [HttpGet]
    [Route("health-check", Name = "{{ class_name }}HealthCheck")]
    [ProducesResponseType(StatusCodes.Status200OK)]
    public IActionResult HealthCheck()
    {
        return Ok();
    }

    [HttpGet]
    [Route("all", Name = "getAll{{ plural_name }}")]
    [ProducesResponseType(typeof(List<{{ class_name }}Response>), StatusCodes.Status200OK)]
    public async Task<IActionResult> GetAll()
    {
        var {{ plural_name | lower }} = await {{ class_name | lower }}Service.GetAllAsync();
        var {{ plural_name | lower }}Response = mapper.Map<List<{{ class_name }}Response>>({{ plural_name | lower }});
        return Ok({{ plural_name | lower }}Response);
    }

    [HttpGet]
    [Route("{id}", Name = "get{{ class_name }}ById")]
    [ProducesResponseType(typeof({{ class_name }}Response), StatusCodes.Status200OK)]
    public async Task<IActionResult> GetById([FromRoute] long id)
    {
        var {{ class_name | lower }} = await {{ class_name | lower }}Service.GetByIdAsync(id);
        var {{ class_name | lower }}Response = mapper.Map<{{ class_name }}Response>({{ class_name | lower }});
        return Ok({{ class_name | lower }}Response);
    }

    [HttpDelete]
    [Route("{id}", Name = "delete{{ class_name }}")]
    [ProducesResponseType(StatusCodes.Status200OK)]
    public async Task<IActionResult> Delete([FromRoute] long id)
    {
        await {{ class_name | lower }}Service.DeleteAsync(id);
        return Ok();
    }

    [HttpPost(Name = "create{{ class_name }}")]
    [ProducesResponseType(typeof({{ class_name }}Response), StatusCodes.Status201Created)]
    public async Task<IActionResult> Create([FromBody] {{ class_name }}Request request)
    {
        var {{ class_name | lower }} = await {{ class_name | lower }}Service.CreateAsync(mapper.Map<{{ class_name }}Entity>(request));
        return CreatedAtAction("create{{ class_name }}", mapper.Map<{{ class_name }}Response>({{ class_name | lower }}));
    }
}
